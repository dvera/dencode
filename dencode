#!/usr/bin/env bash

set -e

usage() {
  echo "" > /dev/stderr
  echo "Usage: $(basename $0) <options> -g <genome> -f <format> [metadata.tsv]" > /dev/stderr
  echo "" > /dev/stderr
  echo "" > /dev/stderr
  echo " required arguments:" > /dev/stderr
  echo "" > /dev/stderr
  echo "  -g     genome [ hg38, hg19, mm10 ] (required)" > /dev/stderr
  echo "  -f     format [ bigWig, bigBed, etc ] (required)" > /dev/stderr
  echo "" > /dev/stderr
  echo " run options:" > /dev/stderr
  echo "" > /dev/stderr
  echo "  -q     query-mode. comma-separated list of unique values in specified fields" > /dev/stderr
  echo "  -d     dry-run (dont download, just dump commands)" > /dev/stderr
  echo "  -p     threads [4]" > /dev/stderr
  echo "" > /dev/stderr
  echo " filtering options:" > /dev/stderr
  echo "" > /dev/stderr
  echo "  -a     assay [ ATAC-seq, ChIP-seq, DNase-seq, RNA-seq, etc ] (required)" > /dev/stderr
  echo "  -t     target [ RNAPII , etc ]" > /dev/stderr
  echo "  -r     regions <bed file>" > /dev/stderr
  echo "  -b     biosample [GM12878,IMR90,etc]" > /dev/stderr
  echo "  -z     allow audited (not NA in last columns)" > /dev/stderr
  echo "  -o     other rules" > /dev/stderr
  echo "" > /dev/stderr
  exit 1
}
while getopts ":q:g:f:a:t:b:o:p:c:r:zd" opt; do
  case $opt in
  d)
    dry=1
   ;;
  q)
    query=$OPTARG
   ;;
  g)
    genome=$OPTARG
   ;;
  f)
    format=$OPTARG
   ;;
  a)
    assay=$OPTARG
   ;;
  t)
    target=$OPTARG
   ;;
  b)
    biosample=$OPTARG
   ;;
  o)
    otherrules=$OPTARG
   ;;
  p)
    threads=$OPTARG
   ;;
  z)
    allowaudit=1
   ;;
  c)
    compartment=$OPTARG
   ;;
  r)
    regions=$OPTARG
   ;;
  \?)
    echo "Invalid option: -$OPTARG" > /dev/stderr
    usage
   ;;
  [?])
   usage
   ;;
  :)
   echo "Option -$OPTARG requires an argument." > /dev/stderr
   usage
   ;;
  esac
done

shift $((OPTIND-1))

#############################
##    PARAMETER CHECKING   ##
#############################
if [[ $genome == "hg38" ]]; then
  genome="GRCh38"
fi
if [[ -z $threads ]]; then
  threads=4
fi
if [[ -z $genome ]]; then
  echo "***ERROR***  genome build not defined" > /dev/stderr
  usage
fi
if [ -z $biosample ]; then
  biosample="*"
fi
if [[ -z $target ]]; then
  target="*"
fi
if [[ -z $assay ]]; then
  assay="*"
fi
if [[ -z $format ]]; then
  format="bigWig"
fi
tmpdir=${HOME}/.dencode
mkdir -p $tmpdir
if [[ -z $@ ]]; then
  # define path to metadata
  #tmpdir=/tmp/${USER}_dencode
  metadatapath=${tmpdir}/metadata_${genome}_${format}.tsv
  metaurl="https://www.encodeproject.org/metadata/type=Experiment&assembly=${genome}&files.file_type=${format}/metadata.tsv"
  if [ ! -f $metadatapath ]; then
    >&2 echo "downloading metadata to ${metadatapath}..."
    wget -qO- "$metaurl" | tr -d '\r' | sed "s/'//g ; s/ /_/g ; s/,_/,/g ; s/\t\t/\tNA\t/g ; s/\t$/\tNA/g ; s/(s)//g ; s/\t\t/\tNA\t/g ; s/\t\t/\tNA\t/g ; s/\t\t/\tNA\t/g ; s/\//-/g " > $metadatapath
    if [ $? -ne 0 ]; then
      rm -f $metadatapath
      >&2 echo "cannot download metadata to $metadatapath"
      exit 6
    else
      >&2 echo "done"
    fi
  else
    >&2 echo "found metadata at $metadatapath"
  fi
else
  if [ ! -f $metadata ]; then
    >&2 echo "cannot find metadata file at $metadatapath"
    exit 1
  else
    metadata=$@
    metadatapath=${tmpdir}/tmpmetadata
    cat $metadata | tr -d '\r' | sed "s/'//g ; s/ /_/g ; s/,_/,/g ; s/\t\t/\tNA\t/g ; s/\t$/\tNA/g ; s/(s)//g ; s/\t\t/\tNA\t/g ; s/\t\t/\tNA\t/g ; s/\t\t/\tNA\t/g" > $metadatapath
    # ; s/\//-/g 
  fi
fi


cols=$(head -n 1 $metadatapath)

getthedata(){
  tail -n+2 $metadatapath
}
export -f getthedata


# query mode
if [ ! -z $query ]; then
  # break up list of queries
  queries=$(echo $query | tr ',' ' ')
  while IFS=$'\t' read -r $cols; do
    if [[ $Assembly == $genome ]] && [[ $Biosample_term_name == $biosample ]] && [[ $Assay == $assay ]] && [[ $Experiment_target == $target ]]; then
      for i in $queries; do
        # print variable for each row without a newline
        printf "%s\t" ${!i}
      done
      printf "\n"
    fi
  done <  <(getthedata) | uniq | sort | uniq -c
fi

# if [ ! -z $regions ]; then
  # check regions file
# fi
# download/dry mode
if [ -z $query ]; then
  >&2 echo "download mode..."
  #while IFS=$'\t' read -r $cols;  do
  while read -r $cols; do
    echo $cols
#    if [[ $Assembly == $genome ]]; then
    if [[ $Assembly == $genome ]] && [[ $Biosample_term_name == $biosample ]] && [[ $Assay == $assay ]] ; then
      # && [[ $Experiment_target == $target ]] && [[ $Audit_WARNING == "NA" ]] && [[ $Audit_NOT_COMPLIANT == "NA" ]] && [[ $Audit_NOT_ERROR == "NA" ]]

      # set output names
      if [[ ${Assay} == "ChIP-seq" ]]; then
        prefix=${Project}_${Assembly}_${Biosample_term_name}_${Assay}_${Experiment_target}_${Output_type}_${File_accession}
      elif [[ ${Assay} == "RNA-seq" ]]; then
        prefix=${Project}_${Assembly}_${Biosample_term_name}_${Assay}_${Experiment_target}_${Output_type}_${File_accession}
      else
        prefix=${Project}_${Assembly}_${Biosample_term_name}_${Assay}_${Experiment_target}_${Output_type}_${File_accession}
      fi

      if [ ! -z $regions ]; then
        >&2 echo "bigWigAverageOverBed -bedOut=/dev/stdout \"${File_download_URL}?proxy=true\" <(awk '{print \$1,\$2,\$3,NR}' OFS='\t' $regions) /dev/null | cut -f 1,2,3,5 > ${prefix}.bg"
        if [ -z $dry ]; then
          echo "bigWigAverageOverBed -bedOut=/dev/stdout \"${File_download_URL}?proxy=true\" <(awk '{print \$1,\$2,\$3,NR}' OFS='\t' $regions) /dev/null | cut -f 1,2,3,5 > ${prefix}.bg"
        fi
      else
        >&2 echo "wget -O ${prefix}.${File_format} \"${File_download_URL}?proxy=true\""
        if [ -z $dry ]; then
          echo "wget -O ${prefix}.${File_format} \"${File_download_URL}?proxy=true\""
        fi
      fi
    fi
  done < <(getthedata)
fi | parallel -j $threads 2>/dev/null

















#
